BASIC CONCEPTS:

Player attributes:
    - NAME : str  # user input
    - GENDER : str  # user input
    - TITLE : str  # special titles grant different effects, like increasing/decreasing stats or triggering events,
                     initialised to None
    - CLASS ROLE : str  # different class roles can equip different items and use different abilities;
                          similar to DnD classes,
                          initialised to None

    STATS
    - LEVEL : int  # scales with the rest of the stats
    - EXP : int  # stores current amount of EXP the player has obtained (resets after level up)
    - EXP-REQUIRED : int  # stores the <EXP> amount required to level up;
                            dynamically updates <EXP-REQUIRED> to level up to the next level depending on current level'
	- HP : int
	- ATK/STRENGTH : int
	- INTELLIGENCE : int  # used to determine magic strength,
	                        higher intel = access to stronger mana based skills;
	                        increases success rate of magic based skills
	- DEXTERITY : int  # used to unlock certain skills; increases success rate of certain skills
	- LUCK : int  # can be used to increase floor/threshold of random rolls
	- TOTAL MANA/MP : int  # stores total reserves available
	- SKILL POINTS : int  # a number that can be used to invest into certain skills such as;
	    - HP
	    - ATK/STRENGTH
	    - DEXTERITY
	    - INTELLIGENCE
	    - LUCK

	- Other attrs (that affect game logic):
		- REPUTATION : int  # reputation affects the NPCs you can talk to,
		                      dialogue options and quest triggers
		- SANITY : int  # Work in progress idea;
		                  affects your dialogue options,
		                  can limit/expand your actions,
		                  can affect ending achieved,
		                  affected by player's choices/actions taken
		- CURRENCY : int or [arr] of int  # based on how many currency systems to be added

    COMBAT RELATED equips
	- Weapon equip : WEAPON object  # can only equip one weapon type;
	                                  weapons can only be equipped if already in inventory;
	                                  initialised to None
	- Accessory equip : ITEM object  # can only equip one accessory;
                                       accessories can only be equipped if already in inventory;
                                       initialised to None
	- Equipment: EQUIPMENT object  # equipment can only be equipped if already in inventory;
	                                 initialised to None

	MISC/GAME data
	- INVENTORY : [arr] of ITEM objects  # initial inventory; can store up to 100 ITEMS
	    - DIARY  # stores and retrieves notes when prompted
	- PARTY : [arr] of NPC objects  # Work in progress idea;
	                                  creating a party with NPCs can help in combat situations,
	                                  can change options/actions/dialogue based on NPC affiliations within party,
	                                  having certain/no party members can trigger events
	- QUEST LOG : [arr] of QUEST objects  # stores data on accepted quests


NPC attributes:
    - NAME : str
    - GENDER : str
    - AGE : int
    - TITLE : str  # special titles trigger different events based on player stats
    - JOB : str  # different jobs have different interact options or different player actions;
                   might turn into its own class
    - AFFILIATION : str  # NPCs might be affiliated with certain 'groups';
                           choosing to work with NPCs of a certain affiliation can unlock different events or titles

    STATS
	- HP : int
	- ATK/STRENGTH : int
	- INTELLIGENCE : int  # increases success rate of magic based skills
	- DEXTERITY : int  # increases success rate of certain skills
	- LUCK : int  # can be used to increase floor/threshold of random rolls
	- TOTAL MANA/MP : int  # stores total reserves available

	- Other attrs (that affect game logic):
		- REPUTATION : int or [range] of int # threshold for NPCs to interact with you (above or within a range of
                                             NPC <REPUTATION> level);
		- SANITY : int or [range] of int  # Work in progress idea;
		                                  threshold for certain NPCs to interact with player character (above or within
		                                  a range of NPC <SANITY> level);

	- Inventory : [arr] of ITEM objects  # certain NPCs can give certain items
	- Quests : [arr] of QUEST objects  # stores all available quests/events that can be triggered via an NPC

	# SUBJECT TO CHANGE
	- Dialogue : [arr] of TXT FILES  # stores all available dialogues within separate text files;
	                                   each event will have separate text files for each dialogue that can be called by
	                                   file name (can change how dialogue logic works later)
	#


MONSTER attributes:
    - NAME : str  # initialised to None, however some boss monsters might be named monsters
    - SPECIES : str
    - TYPE : str  # can be either a common, rare or boss monster
    - EXP : int  # represents the amount of exp that the monster can give (upper limit)
    - STATS : {<stat> : <int>}  # once the monster dies, the player's <stat> is affected by <int> amount

    STATS
    - HP : int
    - ATK/STRENGTH : int
    - INTELLIGENCE : int  # increases success rate of magic based skills
    - DEXTERITY : int  # increases success rate of certain skills
    - LUCK : int  # can be used to increase floor/threshold of random rolls
    - TOTAL MANA/MP : int  # stores total reserves available


ITEM attributes:
    - ITEM ID : str  # used to reference item
    - NAME : str
    - DESCRIPTION : str
    - QUEST TRIGGER : bool  # used to check if an item triggers a quest/event, else None
    - NPC TRIGGER : str  # used to store name of NPC that requires the item, else None


WEAPON attributes(inherited from ITEM):
    - ITEM ID : str  # used to reference item
    - NAME : str
    - DESCRIPTION : str
    - CLASS ROLE : str  # certain classes can only use certain weapon types
    - TYPE : str  # weapon type, for example axe, sword, fists, bows etc.

    STATS
    	- HP : int or [range] of int  # hp threshold required to use weapon (above or within <RANGE> range)
    	- ATK/STRENGTH : int or [range] of int  # atk threshold required to use weapon (above or within <RANGE> range)
    	- INTELLIGENCE : int or [range] of int  # intel threshold required to use weapon (above or within <RANGE> range)
    	- DEXTERITY : int or [range] of int  # dex threshold required to use weapon (above or within <RANGE> range)
    	- TOTAL MANA/MP : int or [range] of int # mana threshold required to use weapon (above or within <RANGE> range)

    - RARITY : float  # probability of obtaining the weapon through an event


ACCESSORY attributes(inherited from ITEM):
    - SAME AS ITEM +
    - REQUIREMENTS : {<stat> : <int>}  # pre-requisite <stat> stats required for the player to have to equip said
                                         accessory
    - STATS : {<stat> : <int>}  # once equipped, the player's <stat> is affected by <int> amount


EQUIPMENT attributes(inherited from ITEM):
    - SAME AS ITEM +
    - TYPE : str  # equipment can either be a headpiece, chest-piece, gauntlets/gloves or boots;
                    each type of equipment can only be on a player once; each equipment on a player MUST BE UNIQUE
    - REQUIREMENTS : {<stat> : <int>}  # pre-requisite <stat> stats required for the player to have to equip said
                                         accessory
    - STATS : {<stat> : <int>}  # once equipped, the player's <stat> is affected by <int> amount

QUEST attributes:
    - NAME : str
    - ID : str  # for easy reference to a quest
    - DESCRIPTION : str
    - REQUIREMENTS : {<stat> : <int>}  # pre-requisite <stat> stats required for the player to trigger a quest
    - IS-COMPLETE : bool  # a method is called to determine whether a quest has reached completion requirements
    - ITEMS : [arr] of str  # if required, stores items needed for quest completion


LOCATION/BUILDING attributes:
    - NAME : str
    - ID : str  # for easy reference to a location
    - NPC : [arr] of NPC  # stores data for all NPCs, if any, that are located in a location


# SUBJECT TO CHANGE
ROOM attributes (for random dungeon types):  # accepts north, east, south, west exits as parameters
                                               unless specifically stated, the parameters should be parsed as None
    - TYPE : str  # a dungeon room can be either a combat room, rest (restore) room or an event/occurrence room
        - COMBAT room : features 1-3 enemies at random and has a chance at dropping items, equipment etc.
        - EVENT/OCCURRENCE room : may encounter a random helpful/harmful NPC or a quick-time event
        - REST(ORE) room : can heal party for 60% of party max HP; allow player to perform certain actions like
                           checking inventory, equipping/removing items, checking stats/skills etc.
    - NORTH-EXIT : EXIT object
    - EAST-EXIT : EXIT object
    - SOUTH-EXIT : EXIT object
    - WEST-EXIT : EXIT object


EXIT attributes (used to store data about exits for rooms):
    - EXIT-EXISTS : bool  # stores whether it is a valid exit or a connection exists to another room;
                            to create random dungeons, this attribute would be randomly set for all directions of a room
    - NEXT-ROOM : ROOM object  # stores data about the room that an exit is connected to;
                                 is initialised to None;
                                 next generated room is automatically connected to a randomly chosen exit of the
                                 previous room that does not already have a connecting room;
                                 last step is repeated until all rooms have an exit that is also connected to another
                                 room
#


MAP layout:
    AREA/ZONE TYPES
    - NEUTRAL ZONE / TOWN SQUARE  # main hub for interacting with non-combatant type NPCs, marketplace, recruiting NPCs
    - DUNGEON ZONE  # randomly generated dungeon;
                      has a chance of containing items/equipment/quests/important NPC interactions or recruitments/
                      class evolving or class change


AVAILABLE ACTIONS:
    - MOVE-TO-AREA <area>  # moves to one of the zones according to user input
    - TALK-TO-NPC <npc>  # if the npc can be interacted with, this option will appear
    - GO-TO-LOCATION <location>  # mainly applicable in the NEUTRAL ZONE, where there exists multiple locations such as
                        blacksmiths, etc.
    - VIEW-STATS  # used to check stats
        - NAME
        - GENDER
        - TITLE
        - CLASS ROLE

        - LEVEL
        - EXP
        - EXP-REQUIRED
        - HP
        - ATK/STRENGTH
        - INTELLIGENCE
        - DEXTERITY
        - LUCK
        - TOTAL MANA/MP
        - SKILL POINTS
        - REPUTATION
        - SANITY
    - VIEW-CURRENCY  # used to check how much currency the user has
    - OPEN-INVENTORY  # used to open inventory
    - EQUIP <item> <equip slot>  # if the item can be equipped and is already in the inventory, used to equip items onto
                                   the given item slot
    - USE-SKILL-POINTS <int> <stat>  # uses indicated amount of skill points onto the given stat to raise it, given the
                                       skill points inputted are a valid number
    - BUY-ITEM <item>  # if player has enough money, used to buy the item indicated by the command
    - SELL-ITEM <item>  # used to sell an item if the player has said item
    - GO <direction>  # applicable only in dungeons
